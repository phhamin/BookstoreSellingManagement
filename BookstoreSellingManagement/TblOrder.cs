using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Bookstore
{
	/// <summary>
	/// Strongly-typed collection for the TblOrder class.
	/// </summary>
    [Serializable]
	public partial class TblOrderCollection : ActiveList<TblOrder, TblOrderCollection>
	{	   
		public TblOrderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblOrderCollection</returns>
		public TblOrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblOrder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblOrder table.
	/// </summary>
	[Serializable]
	public partial class TblOrder : ActiveRecord<TblOrder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblOrder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblOrder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblOrder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblOrder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblOrder", TableType.Table, DataService.GetInstance("Bookstore"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarOrderDate = new TableSchema.TableColumn(schema);
				colvarOrderDate.ColumnName = "OrderDate";
				colvarOrderDate.DataType = DbType.DateTime;
				colvarOrderDate.MaxLength = 0;
				colvarOrderDate.AutoIncrement = false;
				colvarOrderDate.IsNullable = false;
				colvarOrderDate.IsPrimaryKey = false;
				colvarOrderDate.IsForeignKey = false;
				colvarOrderDate.IsReadOnly = false;
				
						colvarOrderDate.DefaultSetting = @"(getdate())";
				colvarOrderDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderDate);
				
				TableSchema.TableColumn colvarDeliveryDate = new TableSchema.TableColumn(schema);
				colvarDeliveryDate.ColumnName = "DeliveryDate";
				colvarDeliveryDate.DataType = DbType.DateTime;
				colvarDeliveryDate.MaxLength = 0;
				colvarDeliveryDate.AutoIncrement = false;
				colvarDeliveryDate.IsNullable = true;
				colvarDeliveryDate.IsPrimaryKey = false;
				colvarDeliveryDate.IsForeignKey = false;
				colvarDeliveryDate.IsReadOnly = false;
				
						colvarDeliveryDate.DefaultSetting = @"(getdate())";
				colvarDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryDate);
				
				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Guid;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				
						colvarCustomerId.DefaultSetting = @"(newid())";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);
				
				TableSchema.TableColumn colvarDiscount = new TableSchema.TableColumn(schema);
				colvarDiscount.ColumnName = "Discount";
				colvarDiscount.DataType = DbType.Decimal;
				colvarDiscount.MaxLength = 0;
				colvarDiscount.AutoIncrement = false;
				colvarDiscount.IsNullable = false;
				colvarDiscount.IsPrimaryKey = false;
				colvarDiscount.IsForeignKey = false;
				colvarDiscount.IsReadOnly = false;
				
						colvarDiscount.DefaultSetting = @"((0))";
				colvarDiscount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscount);
				
				TableSchema.TableColumn colvarTotalPrice = new TableSchema.TableColumn(schema);
				colvarTotalPrice.ColumnName = "TotalPrice";
				colvarTotalPrice.DataType = DbType.Decimal;
				colvarTotalPrice.MaxLength = 0;
				colvarTotalPrice.AutoIncrement = false;
				colvarTotalPrice.IsNullable = false;
				colvarTotalPrice.IsPrimaryKey = false;
				colvarTotalPrice.IsForeignKey = false;
				colvarTotalPrice.IsReadOnly = false;
				
						colvarTotalPrice.DefaultSetting = @"((0))";
				colvarTotalPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPrice);
				
				TableSchema.TableColumn colvarPaymentPrice = new TableSchema.TableColumn(schema);
				colvarPaymentPrice.ColumnName = "PaymentPrice";
				colvarPaymentPrice.DataType = DbType.Decimal;
				colvarPaymentPrice.MaxLength = 0;
				colvarPaymentPrice.AutoIncrement = false;
				colvarPaymentPrice.IsNullable = false;
				colvarPaymentPrice.IsPrimaryKey = false;
				colvarPaymentPrice.IsForeignKey = false;
				colvarPaymentPrice.IsReadOnly = false;
				
						colvarPaymentPrice.DefaultSetting = @"((0))";
				colvarPaymentPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentPrice);
				
				TableSchema.TableColumn colvarPaidPrice = new TableSchema.TableColumn(schema);
				colvarPaidPrice.ColumnName = "PaidPrice";
				colvarPaidPrice.DataType = DbType.Decimal;
				colvarPaidPrice.MaxLength = 0;
				colvarPaidPrice.AutoIncrement = false;
				colvarPaidPrice.IsNullable = false;
				colvarPaidPrice.IsPrimaryKey = false;
				colvarPaidPrice.IsForeignKey = false;
				colvarPaidPrice.IsReadOnly = false;
				
						colvarPaidPrice.DefaultSetting = @"((0))";
				colvarPaidPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaidPrice);
				
				TableSchema.TableColumn colvarOrderStatus = new TableSchema.TableColumn(schema);
				colvarOrderStatus.ColumnName = "OrderStatus";
				colvarOrderStatus.DataType = DbType.AnsiString;
				colvarOrderStatus.MaxLength = 10;
				colvarOrderStatus.AutoIncrement = false;
				colvarOrderStatus.IsNullable = false;
				colvarOrderStatus.IsPrimaryKey = false;
				colvarOrderStatus.IsForeignKey = false;
				colvarOrderStatus.IsReadOnly = false;
				
						colvarOrderStatus.DefaultSetting = @"('')";
				colvarOrderStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderStatus);
				
				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 1073741823;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				
						colvarNote.DefaultSetting = @"('')";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);
				
				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				
						colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);
				
				TableSchema.TableColumn colvarUpdatedUser = new TableSchema.TableColumn(schema);
				colvarUpdatedUser.ColumnName = "UpdatedUser";
				colvarUpdatedUser.DataType = DbType.AnsiString;
				colvarUpdatedUser.MaxLength = 30;
				colvarUpdatedUser.AutoIncrement = false;
				colvarUpdatedUser.IsNullable = false;
				colvarUpdatedUser.IsPrimaryKey = false;
				colvarUpdatedUser.IsForeignKey = false;
				colvarUpdatedUser.IsReadOnly = false;
				
						colvarUpdatedUser.DefaultSetting = @"('')";
				colvarUpdatedUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedUser);
				
				TableSchema.TableColumn colvarUpdatedDate = new TableSchema.TableColumn(schema);
				colvarUpdatedDate.ColumnName = "UpdatedDate";
				colvarUpdatedDate.DataType = DbType.DateTime;
				colvarUpdatedDate.MaxLength = 0;
				colvarUpdatedDate.AutoIncrement = false;
				colvarUpdatedDate.IsNullable = false;
				colvarUpdatedDate.IsPrimaryKey = false;
				colvarUpdatedDate.IsForeignKey = false;
				colvarUpdatedDate.IsReadOnly = false;
				
						colvarUpdatedDate.DefaultSetting = @"(getdate())";
				colvarUpdatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Bookstore"].AddSchema("TblOrder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("OrderDate")]
		[Bindable(true)]
		public DateTime OrderDate 
		{
			get { return GetColumnValue<DateTime>(Columns.OrderDate); }
			set { SetColumnValue(Columns.OrderDate, value); }
		}
		  
		[XmlAttribute("DeliveryDate")]
		[Bindable(true)]
		public DateTime? DeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveryDate); }
			set { SetColumnValue(Columns.DeliveryDate, value); }
		}
		  
		[XmlAttribute("CustomerId")]
		[Bindable(true)]
		public Guid CustomerId 
		{
			get { return GetColumnValue<Guid>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		  
		[XmlAttribute("Discount")]
		[Bindable(true)]
		public decimal Discount 
		{
			get { return GetColumnValue<decimal>(Columns.Discount); }
			set { SetColumnValue(Columns.Discount, value); }
		}
		  
		[XmlAttribute("TotalPrice")]
		[Bindable(true)]
		public decimal TotalPrice 
		{
			get { return GetColumnValue<decimal>(Columns.TotalPrice); }
			set { SetColumnValue(Columns.TotalPrice, value); }
		}
		  
		[XmlAttribute("PaymentPrice")]
		[Bindable(true)]
		public decimal PaymentPrice 
		{
			get { return GetColumnValue<decimal>(Columns.PaymentPrice); }
			set { SetColumnValue(Columns.PaymentPrice, value); }
		}
		  
		[XmlAttribute("PaidPrice")]
		[Bindable(true)]
		public decimal PaidPrice 
		{
			get { return GetColumnValue<decimal>(Columns.PaidPrice); }
			set { SetColumnValue(Columns.PaidPrice, value); }
		}
		  
		[XmlAttribute("OrderStatus")]
		[Bindable(true)]
		public string OrderStatus 
		{
			get { return GetColumnValue<string>(Columns.OrderStatus); }
			set { SetColumnValue(Columns.OrderStatus, value); }
		}
		  
		[XmlAttribute("Note")]
		[Bindable(true)]
		public string Note 
		{
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		  
		[XmlAttribute("IsDeleted")]
		[Bindable(true)]
		public bool IsDeleted 
		{
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		  
		[XmlAttribute("UpdatedUser")]
		[Bindable(true)]
		public string UpdatedUser 
		{
			get { return GetColumnValue<string>(Columns.UpdatedUser); }
			set { SetColumnValue(Columns.UpdatedUser, value); }
		}
		  
		[XmlAttribute("UpdatedDate")]
		[Bindable(true)]
		public DateTime UpdatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.UpdatedDate); }
			set { SetColumnValue(Columns.UpdatedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,DateTime varOrderDate,DateTime? varDeliveryDate,Guid varCustomerId,decimal varDiscount,decimal varTotalPrice,decimal varPaymentPrice,decimal varPaidPrice,string varOrderStatus,string varNote,bool varIsDeleted,string varUpdatedUser,DateTime varUpdatedDate)
		{
			TblOrder item = new TblOrder();
			
			item.Id = varId;
			
			item.OrderDate = varOrderDate;
			
			item.DeliveryDate = varDeliveryDate;
			
			item.CustomerId = varCustomerId;
			
			item.Discount = varDiscount;
			
			item.TotalPrice = varTotalPrice;
			
			item.PaymentPrice = varPaymentPrice;
			
			item.PaidPrice = varPaidPrice;
			
			item.OrderStatus = varOrderStatus;
			
			item.Note = varNote;
			
			item.IsDeleted = varIsDeleted;
			
			item.UpdatedUser = varUpdatedUser;
			
			item.UpdatedDate = varUpdatedDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,DateTime varOrderDate,DateTime? varDeliveryDate,Guid varCustomerId,decimal varDiscount,decimal varTotalPrice,decimal varPaymentPrice,decimal varPaidPrice,string varOrderStatus,string varNote,bool varIsDeleted,string varUpdatedUser,DateTime varUpdatedDate)
		{
			TblOrder item = new TblOrder();
			
				item.Id = varId;
			
				item.OrderDate = varOrderDate;
			
				item.DeliveryDate = varDeliveryDate;
			
				item.CustomerId = varCustomerId;
			
				item.Discount = varDiscount;
			
				item.TotalPrice = varTotalPrice;
			
				item.PaymentPrice = varPaymentPrice;
			
				item.PaidPrice = varPaidPrice;
			
				item.OrderStatus = varOrderStatus;
			
				item.Note = varNote;
			
				item.IsDeleted = varIsDeleted;
			
				item.UpdatedUser = varUpdatedUser;
			
				item.UpdatedDate = varUpdatedDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalPriceColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentPriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PaidPriceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderStatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDeletedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedUserColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string OrderDate = @"OrderDate";
			 public static string DeliveryDate = @"DeliveryDate";
			 public static string CustomerId = @"CustomerId";
			 public static string Discount = @"Discount";
			 public static string TotalPrice = @"TotalPrice";
			 public static string PaymentPrice = @"PaymentPrice";
			 public static string PaidPrice = @"PaidPrice";
			 public static string OrderStatus = @"OrderStatus";
			 public static string Note = @"Note";
			 public static string IsDeleted = @"IsDeleted";
			 public static string UpdatedUser = @"UpdatedUser";
			 public static string UpdatedDate = @"UpdatedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
