using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;


// <auto-generated />
namespace Bookstore
{
	/// <summary>
	/// Strongly-typed collection for the TblUser class.
	/// </summary>
    [Serializable]
	public partial class TblUserCollection : ActiveList<TblUser, TblUserCollection>
	{	   
		public TblUserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblUserCollection</returns>
		public TblUserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblUser o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblUser table.
	/// </summary>
	[Serializable]
	public partial class TblUser : ActiveRecord<TblUser>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblUser()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblUser(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblUser(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblUser(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblUser", TableType.Table, DataService.GetInstance("Bookstore"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.AnsiString;
				colvarUserName.MaxLength = 255;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				
						colvarUserName.DefaultSetting = @"('')";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				
						colvarFirstName.DefaultSetting = @"('')";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 100;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				
						colvarLastName.DefaultSetting = @"('')";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = false;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				
						colvarEmail.DefaultSetting = @"('')";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarUserAddress = new TableSchema.TableColumn(schema);
				colvarUserAddress.ColumnName = "UserAddress";
				colvarUserAddress.DataType = DbType.String;
				colvarUserAddress.MaxLength = 1073741823;
				colvarUserAddress.AutoIncrement = false;
				colvarUserAddress.IsNullable = false;
				colvarUserAddress.IsPrimaryKey = false;
				colvarUserAddress.IsForeignKey = false;
				colvarUserAddress.IsReadOnly = false;
				
						colvarUserAddress.DefaultSetting = @"('')";
				colvarUserAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserAddress);
				
				TableSchema.TableColumn colvarUserPassword = new TableSchema.TableColumn(schema);
				colvarUserPassword.ColumnName = "UserPassword";
				colvarUserPassword.DataType = DbType.AnsiString;
				colvarUserPassword.MaxLength = 250;
				colvarUserPassword.AutoIncrement = false;
				colvarUserPassword.IsNullable = false;
				colvarUserPassword.IsPrimaryKey = false;
				colvarUserPassword.IsForeignKey = false;
				colvarUserPassword.IsReadOnly = false;
				
						colvarUserPassword.DefaultSetting = @"('')";
				colvarUserPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserPassword);
				
				TableSchema.TableColumn colvarBirthday = new TableSchema.TableColumn(schema);
				colvarBirthday.ColumnName = "Birthday";
				colvarBirthday.DataType = DbType.DateTime;
				colvarBirthday.MaxLength = 0;
				colvarBirthday.AutoIncrement = false;
				colvarBirthday.IsNullable = false;
				colvarBirthday.IsPrimaryKey = false;
				colvarBirthday.IsForeignKey = false;
				colvarBirthday.IsReadOnly = false;
				
						colvarBirthday.DefaultSetting = @"(getdate())";
				colvarBirthday.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthday);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 20;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = false;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				
						colvarPhone.DefaultSetting = @"('')";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "Sex";
				colvarSex.DataType = DbType.Boolean;
				colvarSex.MaxLength = 0;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = false;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				
						colvarSex.DefaultSetting = @"('')";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);
				
				TableSchema.TableColumn colvarIsActived = new TableSchema.TableColumn(schema);
				colvarIsActived.ColumnName = "IsActived";
				colvarIsActived.DataType = DbType.Boolean;
				colvarIsActived.MaxLength = 0;
				colvarIsActived.AutoIncrement = false;
				colvarIsActived.IsNullable = false;
				colvarIsActived.IsPrimaryKey = false;
				colvarIsActived.IsForeignKey = false;
				colvarIsActived.IsReadOnly = false;
				
						colvarIsActived.DefaultSetting = @"((1))";
				colvarIsActived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActived);
				
				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				
						colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);
				
				TableSchema.TableColumn colvarAvatar = new TableSchema.TableColumn(schema);
				colvarAvatar.ColumnName = "Avatar";
				colvarAvatar.DataType = DbType.AnsiString;
				colvarAvatar.MaxLength = 255;
				colvarAvatar.AutoIncrement = false;
				colvarAvatar.IsNullable = false;
				colvarAvatar.IsPrimaryKey = false;
				colvarAvatar.IsForeignKey = false;
				colvarAvatar.IsReadOnly = false;
				
						colvarAvatar.DefaultSetting = @"('')";
				colvarAvatar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvatar);
				
				TableSchema.TableColumn colvarCreatedUser = new TableSchema.TableColumn(schema);
				colvarCreatedUser.ColumnName = "CreatedUser";
				colvarCreatedUser.DataType = DbType.AnsiString;
				colvarCreatedUser.MaxLength = 30;
				colvarCreatedUser.AutoIncrement = false;
				colvarCreatedUser.IsNullable = false;
				colvarCreatedUser.IsPrimaryKey = false;
				colvarCreatedUser.IsForeignKey = false;
				colvarCreatedUser.IsReadOnly = false;
				
						colvarCreatedUser.DefaultSetting = @"('')";
				colvarCreatedUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedUser);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				
						colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarUpdatedUser = new TableSchema.TableColumn(schema);
				colvarUpdatedUser.ColumnName = "UpdatedUser";
				colvarUpdatedUser.DataType = DbType.AnsiString;
				colvarUpdatedUser.MaxLength = 30;
				colvarUpdatedUser.AutoIncrement = false;
				colvarUpdatedUser.IsNullable = false;
				colvarUpdatedUser.IsPrimaryKey = false;
				colvarUpdatedUser.IsForeignKey = false;
				colvarUpdatedUser.IsReadOnly = false;
				
						colvarUpdatedUser.DefaultSetting = @"('')";
				colvarUpdatedUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedUser);
				
				TableSchema.TableColumn colvarUpdatedDate = new TableSchema.TableColumn(schema);
				colvarUpdatedDate.ColumnName = "UpdatedDate";
				colvarUpdatedDate.DataType = DbType.DateTime;
				colvarUpdatedDate.MaxLength = 0;
				colvarUpdatedDate.AutoIncrement = false;
				colvarUpdatedDate.IsNullable = false;
				colvarUpdatedDate.IsPrimaryKey = false;
				colvarUpdatedDate.IsForeignKey = false;
				colvarUpdatedDate.IsReadOnly = false;
				
						colvarUpdatedDate.DefaultSetting = @"(getdate())";
				colvarUpdatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Bookstore"].AddSchema("TblUser",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("UserAddress")]
		[Bindable(true)]
		public string UserAddress 
		{
			get { return GetColumnValue<string>(Columns.UserAddress); }
			set { SetColumnValue(Columns.UserAddress, value); }
		}
		  
		[XmlAttribute("UserPassword")]
		[Bindable(true)]
		public string UserPassword 
		{
			get { return GetColumnValue<string>(Columns.UserPassword); }
			set { SetColumnValue(Columns.UserPassword, value); }
		}
		  
		[XmlAttribute("Birthday")]
		[Bindable(true)]
		public DateTime Birthday 
		{
			get { return GetColumnValue<DateTime>(Columns.Birthday); }
			set { SetColumnValue(Columns.Birthday, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Sex")]
		[Bindable(true)]
		public bool Sex 
		{
			get { return GetColumnValue<bool>(Columns.Sex); }
			set { SetColumnValue(Columns.Sex, value); }
		}
		  
		[XmlAttribute("IsActived")]
		[Bindable(true)]
		public bool IsActived 
		{
			get { return GetColumnValue<bool>(Columns.IsActived); }
			set { SetColumnValue(Columns.IsActived, value); }
		}
		  
		[XmlAttribute("IsDeleted")]
		[Bindable(true)]
		public bool IsDeleted 
		{
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		  
		[XmlAttribute("Avatar")]
		[Bindable(true)]
		public string Avatar 
		{
			get { return GetColumnValue<string>(Columns.Avatar); }
			set { SetColumnValue(Columns.Avatar, value); }
		}
		  
		[XmlAttribute("CreatedUser")]
		[Bindable(true)]
		public string CreatedUser 
		{
			get { return GetColumnValue<string>(Columns.CreatedUser); }
			set { SetColumnValue(Columns.CreatedUser, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime CreatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("UpdatedUser")]
		[Bindable(true)]
		public string UpdatedUser 
		{
			get { return GetColumnValue<string>(Columns.UpdatedUser); }
			set { SetColumnValue(Columns.UpdatedUser, value); }
		}
		  
		[XmlAttribute("UpdatedDate")]
		[Bindable(true)]
		public DateTime UpdatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.UpdatedDate); }
			set { SetColumnValue(Columns.UpdatedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert()
		{
			TblUser item = new TblUser();
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update()
		{
			TblUser item = new TblUser();
			
				
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}

		/// <summary>
		/// Delete a record, can be used with the Object Data Source
		/// </summary>
		public static void Delete(int recordId)
		{
			int intRecordId = Convert.ToInt32(recordId);
			SqlQuery query = new Delete("TblUser");
			query.Where("Id").IsEqualTo(recordId);
			query.Execute();
		}	

		#endregion



		#region Typed Columns


		public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UserAddressColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UserPasswordColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn BirthdayColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SexColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActivedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDeletedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn AvatarColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedUserColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedUserColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedDateColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			public static string Id = @"Id";
			 public static string UserName = @"UserName";
			 public static string FirstName = @"FirstName";
			 public static string LastName = @"LastName";
			 public static string Email = @"Email";
			 public static string UserAddress = @"UserAddress";
			 public static string UserPassword = @"UserPassword";
			 public static string Birthday = @"Birthday";
			 public static string Phone = @"Phone";
			 public static string Sex = @"Sex";
			 public static string IsActived = @"IsActived";
			 public static string IsDeleted = @"IsDeleted";
			 public static string Avatar = @"Avatar";
			 public static string CreatedUser = @"CreatedUser";
			 public static string CreatedDate = @"CreatedDate";
			 public static string UpdatedUser = @"UpdatedUser";
			 public static string UpdatedDate = @"UpdatedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
 